ESTRUTURA DE REPETIÇÃO
- Conceitos Importantes: Navegando coleções de dados com Ruby – Containers, Blocos e Iteradores

# A maior parte dos programas lida com coleções de dados, por exemplo: as pessoas inscritas em um curso, as músicas na sua playlist, os livros na sua estante, etc. Nós já abordamos superficialmente duas classes da biblioteca padrão de Ruby disponíveis para tratamento de coleções de dados: arrays e hashes. Dominar estas duas classes é fundamental para se tornar um bom programador nesta linguagem. Entretanto, este domínio pode consumir algum tempo, visto que ambas as classes possuem diversos métodos disponíveis.

Estas classes não são as únicas a contribuir com a linguagem para o tratamento de coleções. Ruby também tem uma sintaxe de blocos que lhe permite encapsular pedaços (agrupamentos) de código. Quando utilizados em conjunto com coleções, estes blocos tornam-se poderosas construções de iteradores. Vamos agora rever os conceitos de arrays, hashes e conhecer em profundidade o uso de blocos e iteradores.
===========================================================
- ARRAYS
A classe array mantém coleções de referências a objetos. Um literal de array é bem simples: uma lista de objetos informadas entre um par de abre e fecha colchetes:

Ex:
a = [ 3.14159, "gato", 99 ]
puts a.class       # => Array
puts a.length     # => 3
puts a[0]       # => 3.14159
puts a[1]       # => "gato"
puts a[2]       # => 99
puts a[3]       # => nil

b = Array.new
puts b.class     # => Array
puts b.length     # => 0
puts b[0] =     "second"
puts b[1] =     "array"
puts b # =>     ["second", "array"]

# Arrays são indexados utilizando o operador []. Assim como a maioria dos operadores em Ruby, este é na verdade um método (um método de instância da classe Array) e assim pode ser sobrescrito em subclasses. Os arrays iniciam-se a indexação a partir do índice 0 (isto é, são arrays base 0). Indexando um array com qualquer número inteiro não negativo ele vai retornar o objeto na posição indicada, ou nil nos casos em que não exista objeto na posição informada. Ao indexar um array com um número inteiro negativo, a contagem é feita de trás para a frente:

Ex:
a = [ 1, 3, 5, 7, 9 ]
puts a[-1]     # => 9
puts a[-2]     # => 7
puts a[-99]     # => nil

# Pode-se também indexar arrays com um par de números [start, count]. Esta operação retorna um novo array contendo referências para o número de objetos especificados pelo parâmetro count, a partir da posição start.

Ex:
a = [ 1, 3, 5, 7, 9 ]
puts a[1, 3]         # => [3, 5, 7]
puts a[3, 1]         # => [7]
puts a[-3, 2]       # => [5, 7]

# Finalmente, pode-se indexar arrays usando ranges e neste caso as posições de início e fim são separadas por dois ou três pontos consecutivos. A forma de dois pontos inclui o índice especificado como fim da sequência enquanto a forma de três pontos o excluí:

Ex:
a = [ 1, 3, 5, 7, 9 ]
a[1..3]     # => [3, 5, 7]
a[1...3]     # => [3, 5]
a[3..3]     # => [7]
a[-3..-1]     # => [5, 7, 9]

# O operador [] tem um operador correspondente: []=. O operador []= lhe permite definir elementos em um array. Se utilizado com um único número inteiro, o elemento referenciado na posição indicada será substituído por qualquer coisa que esteja no lado direito da atribuição. Quaisquer índices não especificados serão preenchidos com nil:

Ex:
a = [ 1, 3, 5, 7, 9 ]
a[1] = 'bat'       # => [1, "bat", 5, 7, 9]
a[-3] = 'cat'     # => [1, "bat", "cat", 7, 9]
a[3] = [ 9, 8 ]     # => [1, "bat", "cat", [9, 8], 9]
a[6] = 99       # => [1, "bat", "cat", [9, 8], 9, nil, 99]

# Se o indexador do operador []= contiver dois números inteiros (uma posição de início e um número de elementos a partir dessa posição) ou uma faixa de valores (range), então estes elementos do array original serão substituídos pelo que estiver do lado direito da operação de atribuição. Se o número de elementos especificado for zero o valor do lado direito da operação de atribuição é inserido no array antes da posição de início e nenhum dos elementos do array é removido. Se o valor do lado direito da operação de atribuição também for um array, seus elementos são utilizados em substituição aos elementos originais. O tamanho do array é automaticamente ajustado seu número de elementos for diferente do número de elementos informado no array usado na operação de atribuição.

Ex:
a = [ 1, 3, 5, 7, 9 ] ? [1, 3, 5, 7, 9]
a[2, 2] = 'cat'     # => [1, 3, "cat", 9]
a[2, 0] = 'dog'     # => [1, 3, "dog", "cat", 9]
a[1, 1] = [ 9, 8, 7 ]   # => [1, 9, 8, 7, "dog", "cat", 9]
a[0..3] = []      # => ["dog", "cat", 9]
a[5..6] = 99, 98     # => ["dog", "cat", 9, nil, nil, 99, 98]

# Arrays possuem um grande número de métodos úteis. Usando estes métodos, você pode tratar um array como uma pilha, um conjunto, uma fila, etc.

Por exemplo, os métodos push e pop adicionam e removem elementos no final do array, assim você consegue utilizá-lo como uma pilha:
Ex:
stack = []
stack.push "red"
stack.push "green"
stack.push "blue"
p stack
puts stack.pop
puts stack.pop
puts stack.pop
p stack

Resultados:

["red", "green", "blue"]
blue
green
red
[]

# Os métodos first e last retornam as n entradas no início e no final do array, sem remover estes elementos:

Ex:
array = [ 1, 2, 3, 4, 5, 6, 7 ]
p array.first(4)
p array.last(4)

Resultados:
[1, 2, 3, 4]
[4, 5, 6, 7]

